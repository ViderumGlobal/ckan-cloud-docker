proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=cache:30m max_size=250m;
proxy_temp_path /tmp/nginx_proxy 1 2;
server {
    listen 8080;
    server_name _;
    client_max_body_size 1000M;

    location /airflow/ {
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # If the proxy_pass statement has no variables in it, then it will use the "gethostbyaddr" system call during start-up or reload and will cache that value permanently.
        # if there are any variables, such as using either of the following:
        # set $originaddr http://origin.example.com;
        # proxy_pass $originaddr;
        # # or even
        # proxy_pass http://origin.example.com$request_uri;
        # Then nginx will use a built-in resolver, and the "resolver" directive must be present. 
        # When using nginx in a docker-compose service declaration, the services, unless specified will all reside on the same network, and each container will have access to a docker created dns server whose location is always at the ip 127.0.0.11
        resolver 127.0.0.11 valid=10s;
        set $harvester http://harvester:8082;
        proxy_pass $harvester;
        
    }

    location / {
        proxy_pass http://ckan:5000;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $http_host;
        proxy_cache cache;
        proxy_cache_bypass $cookie_auth_tkt;
        proxy_no_cache $cookie_auth_tkt;
        proxy_cache_valid 30m;
        proxy_cache_key $http_host$scheme$proxy_host$request_uri;
        # In emergency comment out line to force caching
        # proxy_ignore_headers X-Accel-Expires Expires Cache-Control;
    }

}
